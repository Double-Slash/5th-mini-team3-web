{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combineReducers } from \"redux\";\nconst intialState = {\n  user: {},\n  post: {}\n};\nconst rootReducer = combineReducers({\n  index: (state = intialState, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  }\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/winco/Desktop/ds/5th-mini-team3-web/team3_mini/Frontend/reducers/index.js"],"names":["HYDRATE","combineReducers","intialState","user","post","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,IAAI,EAAE;AAFY,CAApB;AAKA,MAAMC,WAAW,GAAGJ,eAAe,CAAC;AAClCK,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAGL,WAAT,EAAsBM,MAAtB,KAAiC;AACtC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKT,OAAL;AACE,+CACKO,KADL,GAEKC,MAAM,CAACE,OAFZ;;AAKF;AACE,eAAOH,KAAP;AARJ;AAUD;AAZiC,CAAD,CAAnC;AAeA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst intialState = {\r\n  user: {},\r\n  post: {},\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  index: (state = intialState, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        return {\r\n          ...state,\r\n          ...action.payload,\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}